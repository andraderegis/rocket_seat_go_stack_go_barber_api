name: CI

on:
  push:
    branches: [master]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js Enviroment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: "14"
          check-latest: true

      # Instalar as dependências NPM/Yarn
      - name: Install Dependencies
        run: yarn

      # Criando .env a partir dos secrets
      - name: Create .env file
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_APP_API_URL: ${{ secrets.APP_API_URL }}
          envkey_APP_WEB_URL: ${{ secrets.APP_WEB_URL }}
          envkey_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          envkey_AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          envkey_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          envkey_AWS_S3_GO_BARBER_BUCKET: ${{ secrets.AWS_S3_GO_BARBER_BUCKET }}
          envkey_CACHE_DRIVER: ${{ secrets.CACHE_DRIVER }}
          envkey_JWT_APP_SECRET: ${{ secrets.JWT_APP_SECRET }}
          envkey_MAIL_DRIVER: ${{ secrets.MAIL_DRIVER }}
          envkey_STORAGE_DRIVER: ${{ secrets.STORAGE_DRIVER }}
          envkey_RATE_LIMITER_KEY_PREFIX: ${{ secrets.RATE_LIMITER_KEY_PREFIX }}
          envkey_RATE_LIMITER_POINTS: ${{ secrets.RATE_LIMITER_POINTS }}
          envkey_RATE_LIMITER_DURATION: ${{ secrets.RATE_LIMITER_DURATION }}
          envkey_POSTGRESQL_HOST: ${{ secrets.POSTGRESQL_HOST }}
          envkey_POSTGRESQL_PORT: ${{ secrets.POSTGRESQL_PORT }}
          envkey_POSTGRESQL_USERNAME: ${{ secrets.POSTGRESQL_USERNAME }}
          envkey_POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
          envkey_MONGO_HOST: ${{ secrets.MONGO_HOST }}
          envkey_MONGO_PORT: ${{ secrets.MONGO_PORT }}
          envkey_REDIS_PORT: ${{ secrets.REDIS_PORT }}
          envkey_REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          envkey_TYPEORM_ROOT_ENTITIES: ${{ secrets.TYPEORM_ROOT_ENTITIES }}
          envkey_TYPEORM_ROOT_MIGRATIONS: ${{ secrets.TYPEORM_ROOT_MIGRATIONS }}
          envkey_TYPEORM_ENTITIES_EXTENSION: ${{ secrets.TYPEORM_ENTITIES_EXTENSION }}
          envkey_TYPEORM_MIGRATIONS_EXTENSION: ${{ secrets.TYPEORM_MIGRATIONS_EXTENSION }}
          file_name: .env

      # Executando os tests
      - name: Run Unit Tests
        run: yarn test

      # Executar a build
      - name: Run Build
        run: yarn build

      # Copiar a pasta dist para dentro da Digial Ocean
      - name: Copy Build to Digital Ocean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: "dist,docker,tmp,ormconfig.js,package.json,yarn.lock,.env"
          target: "app/go_barber_api"

      # Executar yarn na Digital Ocean
      - name: Run Scripts
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/app/go_barber_api
            chown deployer:deployer ./docker/deploy.sh
            chmod 400 ./docker/deploy.sh
            ./docker/deploy.sh

# name: CI

# on:
#   push:
#     branches: [ master ]
# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2

#       - name: Setup Node.js enviroment
#         uses: actions/setup-node@v2.1.5
#         with:
#           node-version: 14.x

#       # Instalar as dependências NPM/Yarn
#       - name: Install dependencies
#         run: yarn

#       # Executar a build
#       - name: Run build
#         run: yarn build

#       # Copiar a pasta dist para dentro da Digial Ocean
#       - name: Copy build dist to Digital Ocean
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           port: ${{ secrets.SSH_PORT }}
#           key: ${{ secrets.SSH_KEY }}
#           source: "dist,tmp,package.json,yarn.lock"
#           target: "app/rocket_seat_go_stack_go_barber_api"

#       # Executar yarn na Digital Ocean
#       - name: Run scripts
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           port: ${{ secrets.SSH_PORT }}
#           key: ${{ secrets.SSH_KEY }}
#           script: |
#             cd ~/app/rocket_seat_go_stack_go_barber_api
#             yarn
#             ./node_modules/.bin/typeorm migration:run
#             pm2 restart gobarber-api
