apiVersion: v1
kind: Service
metadata:
  name: gobarber-api-service-dev
spec:
  type: LoadBalancer
  selector:
    app: gobarber-api-dev
  ports:
    - port: 8002
      targetPort: 3333
      nodePort: 30002
      name: tcp
      protocol: TCP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gobarber-api-dev
spec:
  selector:
    matchLabels:
      app: gobarber-api-dev
  replicas: 2
  template:
    metadata:
      labels:
        app: gobarber-api-dev
        version: v1
    spec:
      containers:
        - name: gobarber-api-dev
          image: andradereginaldo/gobarber_api:1.5.0-14-debian-buster

          startupProbe:
            httpGet:
              path: /readyz
              port: 3333
            periodSeconds: 3
            failureThreshold: 10

          readinessProbe:
            httpGet:
              path: /readyz
              port: 3333
            periodSeconds: 3
            initialDelaySeconds: 10

          livenessProbe:
            httpGet:
              path: /readyz
              port: 3333
            periodSeconds: 5
            failureThreshold: 5
            initialDelaySeconds: 15

          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 3333

          envFrom:
            - configMapRef:
                name: gobarber-api-dev-env

          volumeMounts:
            - mountPath: "/go_barber/volume"
              name: gobarber-api-dev-volume

      volumes:
        - name: gobarber-api-dev-volume
          persistentVolumeClaim:
            claimName: gobarber-api-dev-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gobarber-api-dev-pvc
spec:
  resources:
    requests:
      storage: 2Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gobarber-api-dev-env
data:
  # Environment
  NODE_ENV: "dev"

  # Application Hosts
  APP_API_URL: "http://localhost:3333"
  APP_WEB_URL: "http://localhost:3000"

  # Cache Driver
  CACHE_DRIVER: "redis"

  # JWT Settings
  JWT_APP_SECRET: "72818791bc3d90a1fd6ca19700082593"

  # Mail Driver
  MAIL_DRIVER: "ethereal"

  # Storage Driver
  STORAGE_DRIVER: "s3"
  # STORAGE_DRIVER=disk

  #Rate Limiter
  RATE_LIMITER_KEY_PREFIX: "ratelimit"
  RATE_LIMITER_POINTS: "5"
  RATE_LIMITER_DURATION: "1"

  # Postgresql Settings
  POSTGRESQL_HOST: "postgres.default.svc.cluster.local"
  POSTGRESQL_PORT: "35432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_PASSWORD: "postgres"

  # Mongo Settings
  MONGO_HOST: "mongo.default.svc.cluster.local"
  MONGO_PORT: "30290"

  # Redis Settings
  REDIS_HOST: "redis.default.svc.cluster.local"
  REDIS_PORT: "9379"
  REDIS_PASSWORD: ""

  # TypeORM Settings
  TYPEORM_ROOT_ENTITIES: "dist"
  TYPEORM_ROOT_MIGRATIONS: "dist"
  TYPEORM_ENTITIES_EXTENSION: "js"
  TYPEORM_MIGRATIONS_EXTENSION: "js"
# ---
# apiVersion: networking.istio.io/v1beta1
# kind: Gateway
# metadata:
#   name: gobarber-ingress-gateway
# spec:
#   selector:
#     istio: ingressgateway
#   servers:
#     - port:
#         number: 80
#         name: http
#         protocol: http2
#       hosts:
#         #domínio que hospeda do istio. usando "*" ele permite todos. usar em ambiente local
#         - "*.gobarber"

# ---
# apiVersion: networking.istio.io/v1beta1
# kind: VirtualService
# metadata:
#   name: gobarber-api-service-v1
# spec:
#   hosts:
#     # endereço do host declarado no gateway
#     - "dev-api-v1.gobarber"
#   gateways:
#     - "gobarber-ingress-gateway"
#   http:
#     - match:
#         - uri:
#             prefix: "/"
#       route:
#         - destination:
#             host: gobarber-api-service-dev
#             subset: v1

# ---
# apiVersion: networking.istio.io/v1beta1
# kind: DestinationRule
# metadata:
#   name: gobarber-api-destination-rule
# spec:
#   # nome do service declarado no kubernetes
#   host: gobarber-api-service-dev
#   trafficPolicy:
#     loadBalancer:
#       simple: ROUND_ROBIN
#   subsets:
#     - name: v1
#       labels:
#         version: v1
#       trafficPolicy:
#         loadBalancer:
#           simple: LEAST_CONN
